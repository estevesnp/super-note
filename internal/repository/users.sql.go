// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package repository

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users
(username, password)
VALUES
($1, $2)
RETURNING id, username, created_at
`

type CreateUserParams struct {
	Username string
	Password string
}

type CreateUserRow struct {
	ID        uuid.UUID
	Username  string
	CreatedAt time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.Password)
	var i CreateUserRow
	err := row.Scan(&i.ID, &i.Username, &i.CreatedAt)
	return i, err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, username, created_at FROM users
`

type GetAllUsersRow struct {
	ID        uuid.UUID
	Username  string
	CreatedAt time.Time
}

func (q *Queries) GetAllUsers(ctx context.Context) ([]GetAllUsersRow, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUsersRow
	for rows.Next() {
		var i GetAllUsersRow
		if err := rows.Scan(&i.ID, &i.Username, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByCreds = `-- name: GetUserByCreds :one
SELECT id, username, created_at FROM users
WHERE username = $1
AND password = $2
LIMIT 1
`

type GetUserByCredsParams struct {
	Username string
	Password string
}

type GetUserByCredsRow struct {
	ID        uuid.UUID
	Username  string
	CreatedAt time.Time
}

func (q *Queries) GetUserByCreds(ctx context.Context, arg GetUserByCredsParams) (GetUserByCredsRow, error) {
	row := q.db.QueryRow(ctx, getUserByCreds, arg.Username, arg.Password)
	var i GetUserByCredsRow
	err := row.Scan(&i.ID, &i.Username, &i.CreatedAt)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, created_at FROM users
WHERE id = $1
LIMIT 1
`

type GetUserByIdRow struct {
	ID        uuid.UUID
	Username  string
	CreatedAt time.Time
}

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (GetUserByIdRow, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i GetUserByIdRow
	err := row.Scan(&i.ID, &i.Username, &i.CreatedAt)
	return i, err
}
