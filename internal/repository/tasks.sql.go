// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tasks.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const getTaskById = `-- name: GetTaskById :one
SELECT id, list_id, name, description, completed, created_at, updated_at FROM tasks
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetTaskById(ctx context.Context, id uuid.UUID) (Task, error) {
	row := q.db.QueryRow(ctx, getTaskById, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.ListID,
		&i.Name,
		&i.Description,
		&i.Completed,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTasksByList = `-- name: GetTasksByList :many
SELECT id, list_id, name, description, completed, created_at, updated_at FROM tasks
WHERE list_id = $1
`

func (q *Queries) GetTasksByList(ctx context.Context, listID uuid.UUID) ([]Task, error) {
	rows, err := q.db.Query(ctx, getTasksByList, listID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.ListID,
			&i.Name,
			&i.Description,
			&i.Completed,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTasksByUser = `-- name: GetTasksByUser :many
SELECT t.id, t.list_id, t.name, t.description, t.completed, t.created_at, t.updated_at 
FROM tasks t
INNER JOIN lists l ON t.list_id = l.id
INNER JOIN users u ON l.user_id = u.id
`

func (q *Queries) GetTasksByUser(ctx context.Context) ([]Task, error) {
	rows, err := q.db.Query(ctx, getTasksByUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.ListID,
			&i.Name,
			&i.Description,
			&i.Completed,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
