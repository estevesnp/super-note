// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: lists.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createList = `-- name: CreateList :one
INSERT INTO lists
(user_id, name, description)
VALUES
($1, $2, $3)
RETURNING id, name, description
`

type CreateListParams struct {
	UserID      uuid.UUID `json:"user_id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
}

type CreateListRow struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
}

func (q *Queries) CreateList(ctx context.Context, arg CreateListParams) (CreateListRow, error) {
	row := q.db.QueryRow(ctx, createList, arg.UserID, arg.Name, arg.Description)
	var i CreateListRow
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const getListById = `-- name: GetListById :one
SELECT id, name, description FROM lists
WHERE id = $1
LIMIT 1
`

type GetListByIdRow struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
}

func (q *Queries) GetListById(ctx context.Context, id uuid.UUID) (GetListByIdRow, error) {
	row := q.db.QueryRow(ctx, getListById, id)
	var i GetListByIdRow
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const getListsByUser = `-- name: GetListsByUser :many
SELECT id, name, description FROM lists
WHERE user_id = $1
`

type GetListsByUserRow struct {
	ID          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
}

func (q *Queries) GetListsByUser(ctx context.Context, userID uuid.UUID) ([]GetListsByUserRow, error) {
	rows, err := q.db.Query(ctx, getListsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetListsByUserRow
	for rows.Next() {
		var i GetListsByUserRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
